generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                         String         @id @default(cuid())
  email                      String         @unique
  name                       String
  avatar                     String?
  createdAt                  DateTime       @default(now())
  updatedAt                  DateTime       @updatedAt
  username                   String?
  phone                      String?
  bio                        String?
  emailVerified              DateTime?
  phoneVerified              DateTime?
  lastLogin                  DateTime?
  isActive                   Boolean?       @default(true)
  metadata                   Json?
  authMethods                AuthMethod[]
  magicLinks                 MagicLink[]
  Project                    Project[]
  Reference                  Reference[]
  RefreshToken               RefreshToken[]
  Subscription               Subscription?
  Task_Task_assigneeIdToUser Task[]         @relation("Task_assigneeIdToUser")
  Task_Task_creatorIdToUser  Task[]         @relation("Task_creatorIdToUser")

  @@index([email])
}

model AuthMethod {
  id           String   @id @default(dbgenerated("(gen_random_uuid())::text"))
  userId       String
  provider     String
  providerId   String?
  email        String?
  phone        String?
  passwordHash String?
  metadata     Json?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @default(now()) @updatedAt
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([userId, provider, providerId])
}

model MagicLink {
  id        String    @id @default(dbgenerated("(gen_random_uuid())::text"))
  userId    String
  email     String
  token     String    @unique
  code      String
  expiresAt DateTime
  usedAt    DateTime?
  createdAt DateTime  @default(now())
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model Project {
  id          String      @id @default(cuid())
  name        String
  description String?
  userId      String
  archived    Boolean     @default(false)
  metadata    Json?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  User        User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  references  Reference[]
  tasks       Task[]

  @@index([archived])
  @@index([userId])
}

model Task {
  id                         String     @id @default(cuid())
  projectId                  String
  title                      String
  content                    String
  priority                   Priority   @default(NEBULA)
  status                     TaskStatus @default(ACTIVE)
  tags                       String[]
  dueDate                    DateTime?
  completedAt                DateTime?
  creatorId                  String
  assigneeId                 String?
  metadata                   Json?
  createdAt                  DateTime   @default(now())
  updatedAt                  DateTime   @updatedAt
  User_Task_assigneeIdToUser User?      @relation("Task_assigneeIdToUser", fields: [assigneeId], references: [id])
  User_Task_creatorIdToUser  User       @relation("Task_creatorIdToUser", fields: [creatorId], references: [id])
  project                    Project    @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@index([status])
  @@index([priority])
  @@index([assigneeId])
  @@index([creatorId])
  @@index([projectId])
}

model Reference {
  id        String            @id @default(cuid())
  projectId String
  userId    String
  title     String
  content   String
  category  ReferenceCategory
  tags      String[]
  language  String?
  metadata  Json?
  createdAt DateTime          @default(now())
  updatedAt DateTime          @updatedAt
  project   Project           @relation(fields: [projectId], references: [id], onDelete: Cascade)
  User      User              @relation(fields: [userId], references: [id])

  @@index([category])
  @@index([projectId])
  @@index([userId])
}

model ActivityLog {
  id         String   @id
  userId     String
  action     String
  entityType String
  entityId   String
  metadata   Json?
  ipAddress  String?
  userAgent  String?
  createdAt  DateTime @default(now())

  @@index([createdAt])
  @@index([entityType, entityId])
  @@index([userId])
}

model RefreshToken {
  id        String   @id
  token     String   @unique
  userId    String
  expiresAt DateTime
  createdAt DateTime @default(now())
  User      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([token])
  @@index([userId])
}

model Subscription {
  id                   String             @id
  userId               String             @unique
  status               SubscriptionStatus @default(FREE)
  stripeCustomerId     String?            @unique
  stripeSubscriptionId String?            @unique
  currentPeriodEnd     DateTime?
  createdAt            DateTime           @default(now())
  updatedAt            DateTime
  User                 User               @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([stripeCustomerId])
  @@index([userId])
}

enum Priority {
  SUPERNOVA
  STELLAR
  NEBULA
}

enum ReferenceCategory {
  SNIPPET
  DOCUMENTATION
  LINK
  NOTE
}

enum SubscriptionStatus {
  FREE
  PRO
  ENTERPRISE
  CANCELLED
}

enum TaskStatus {
  ACTIVE
  COMPLETED
  DELETED
  ARCHIVED
}
